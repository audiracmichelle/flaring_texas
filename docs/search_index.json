[["index.html", "Flares Texas 1 Flares Texas", " Flares Texas Michelle Audirac 1 Flares Texas Previous studies have identified associations of negative health outcomes in populations within a circular radius from flaring events. A recent study provides evidence of adverse effects in all-cause mortality of elderly due to downwind-exposure to flaring. There is compounding evidence of the long term exposure to flaring pollution, both in the proximity (distance weighted) and accounting for monthly prevailing wind direction. We look at exact trajectories and quantify the dispersion of air parcels within 12 hours from flaring sources. The focus is on the concentration of rapidly spreading air-parcels carrying airborne pollutants emitted during flaring. "],["preprocess-data.html", "2 Preprocess data", " 2 Preprocess data library(tidyverse) library(magrittr) library(lubridate) library(tidycensus) library(sf) library(maps) library(viridis) library(ggthemes) #### include your census api key #census_api_key(&#39;&lt;your_key&gt;&#39;, install = TRUE) #### read flares_raw data flares_data &lt;- read_csv(&quot;../data/input/tx-tracts-vnf-nightly.csv&quot;) flares_data %&lt;&gt;% mutate(STATEFP = as.character(STATEFP), #COUNTYFP = as.character(COUNTYFP), #TRACTCE = as.character(TRACTCE), GEOID = as.character(GEOID)) #### python code to download tracts shapefile from census-tiger site # import wget # from zipfile import ZipFile # import os # # url = &#39;https://www2.census.gov/geo/tiger/TIGER2016/TRACT/tl_2016_48_tract.zip&#39; # wget.download(url, os.path.expanduser(&#39;~/tmp&#39;)) # file_name = os.path.expanduser(&#39;~/tmp/tl_2016_48_tract.zip&#39;) # ZipFile(file_name, &#39;r&#39;).extractall(os.path.expanduser(&#39;~/tmp/tl_2016_48_tract/&#39;)) # os.system(&quot;ls ~/tmp/tl_2016_48_tract/&quot;) #### read administrative boundaries shapefiles state_sf &lt;- st_as_sf(maps::map(&quot;state&quot;, plot = FALSE, fill = TRUE)) %&gt;% filter(ID == &quot;texas&quot;) crs_ &lt;- st_crs(state_sf) tracts_sf &lt;- st_read(&quot;../data/input/tl_2016_48_tract/tl_2016_48_tract.shp&quot;) ## Reading layer `tl_2016_48_tract&#39; from data source ## `/Users/audiracmichelle/GitHub/audiracmichelle/flaring_texas/data/input/tl_2016_48_tract/tl_2016_48_tract.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 5265 features and 12 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -106.6456 ymin: 25.83716 xmax: -93.50804 ymax: 36.5007 ## Geodetic CRS: NAD83 tracts_sf &lt;- tracts_sf %&gt;% dplyr::filter(STATEFP == &quot;48&quot;) %&gt;% mutate(area = ALAND / 1e6) #ALAND in tiger filers is reported in sq meters tracts_sf &lt;- st_transform(tracts_sf, crs_) #### read National Oil and Gas Assessment Province Boundaries basins_sf &lt;- read_sf(&quot;../data/input/usprov12/usprov12.shp&quot;) %&gt;% rename(basin = PROVNAME) #class(st_geometry(basins_sf)) basins_sf %&lt;&gt;% st_transform(crs_) index &lt;- sapply(sf::st_intersects(basins_sf, tracts_sf), length) index &lt;- which(index &gt; 0) basins_sf &lt;- basins_sf[index, ] basins_sf %&gt;% ggplot() + geom_sf(data = state_sf) + geom_sf(aes(fill = basin), alpha = 0.5) # read low permeability oil and gas play boundaries play_bounds_sf &lt;- read_sf(&quot;../data/input/TightOil_ShaleGas_Plays_Lower48_EIA/ShalePlays_US_EIA_Dec2021.shp&quot;) play_bounds_sf %&lt;&gt;% st_transform(crs_) play_points_sf &lt;- play_bounds_sf %&gt;% st_make_valid() %&gt;% st_simplify() %&gt;% st_cast(&quot;MULTIPOINT&quot;) index &lt;- sapply(sf::st_intersects(play_points_sf, tracts_sf), length) index &lt;- which(index &gt; 0) play_bounds_sf &lt;- play_bounds_sf[index, ] ggplot() + geom_sf(data = state_sf) + geom_sf(data = play_bounds_sf, aes(col = Shale_play), fill = NA) #### get flares location (assuming they are located at tract-centroids) #### join flares_data with basins and flares locations flares_sf &lt;- tracts_sf %&gt;% filter(GEOID %in% unique(flares_data$GEOID)) flares_points_sf &lt;- st_centroid(flares_sf) coords &lt;- as_tibble(st_coordinates(flares_points_sf)) %&gt;% rename(Latitude = Y, Longitude = X) flares_sf &lt;- bind_cols(flares_sf, coords) index &lt;- unlist(sf::st_intersects(flares_points_sf, basins_sf)) flares_sf$basin &lt;- basins_sf$basin[index] flares_points_sf$basin &lt;- basins_sf$basin[index] flares_data %&lt;&gt;% left_join(flares_sf %&gt;% st_drop_geometry() %&gt;% select(GEOID, basin, Latitude, Longitude)) ggplot() + geom_sf(data = state_sf) + geom_sf(data = flares_sf, aes(fill = basin), alpha = 0.5) + geom_sf(data = flares_points_sf, aes(col = basin)) #### assign extent regions basins_sf$extent &lt;- basins_sf$basin basins_sf$extent[basins_sf$basin == &quot;South-Central New Mexico&quot;] &lt;- &quot;Permian Basin&quot; basins_sf$extent[basins_sf$basin == &quot;Palo Duro Basin&quot;] &lt;- &quot;Permian Basin&quot; basins_sf$extent[basins_sf$basin == &quot;Raton Basin-Sierra Grande Uplift&quot;] &lt;- &quot;Permian Basin&quot; basins_sf$extent[basins_sf$basin == &quot;Marathon Thrust Belt&quot;] &lt;- &quot;Permian Basin&quot; basins_sf$extent[basins_sf$basin == &quot;Arkoma Basin&quot;] &lt;- &quot;Bend Arch-Fort Worth Basin&quot; basins_sf$extent[basins_sf$basin == &quot;Southern Oklahoma&quot;] &lt;- &quot;Bend Arch-Fort Worth Basin&quot; basins_sf$extent[basins_sf$basin == &quot;Anadarko Basin&quot;] &lt;- &quot;Permian Basin&quot; #### join tracts_sf with basins and extent regions intr_list &lt;- sf::st_intersects(st_centroid(tracts_sf), basins_sf) intr_len &lt;- sapply(intr_list, length) # visual inspection # table(intr_len) # ggplot() + # geom_sf(data = state_sf) + # geom_sf(data = tracts_sf[which(intr_len == 0), ], col = &quot;blue&quot;) intr_list[which(intr_len == 0)] &lt;- 10 index &lt;- unlist(intr_list); rm(intr_list) tracts_sf$basin &lt;- basins_sf$basin[index] tracts_sf$extent &lt;- basins_sf$extent[index] basins_sf %&gt;% group_by(extent) %&gt;% summarise(geometry = st_union(geometry)) %&gt;% st_simplify(dTolerance = 5000) %&gt;% ggplot() + geom_sf(data = state_sf) + geom_sf(aes(fill = extent), alpha = 0.5) basins_sf %&gt;% filter(basin %in% c(&quot;Permian Basin&quot;, &quot;Bend Arch-Fort Worth Basin&quot;, &quot;Gulf Coast Basins&quot;)) %&gt;% ggplot() + geom_sf(aes(fill = extent), alpha = 0.5, size = 0) + geom_sf(data = state_sf, fill = NA) + geom_sf(data = flares_points_sf, size = 0.5) + geom_sf(data = play_bounds_sf, fill = NA, size = 1) + scale_fill_viridis_d() + theme_map() #### get tracts population v18 &lt;- load_variables(2018, &quot;acs5&quot;, cache = TRUE) # View(v18) # Estimate!!Total tract_acs &lt;- get_acs(year = 2018, geography = &quot;tract&quot;, variables = &quot;B01001_001&quot;, state = &quot;TX&quot;, geometry = FALSE) tract_acs %&lt;&gt;% rename(pop = estimate) #### join tracts and population # all shapefile GEOIDs in acs query # sum(!tracts_sf$GEOID %in% tract_acs$GEOID) tracts_sf %&lt;&gt;% left_join(tract_acs %&gt;% select(GEOID, pop)) #### recover area and population from tracts and add to flares data flares_data %&lt;&gt;% left_join( tracts_sf %&gt;% st_drop_geometry() %&gt;% select(GEOID, area, pop) ) #### disperseR input disperser_input &lt;- flares_data %&gt;% select(GEOID, date, flares, Latitude, Longitude) start_hour_ &lt;- lapply(1:nrow(disperser_input), function(x) seq(2, 22, 6)) disperser_input$start_hour = start_hour_ disperser_input &lt;- unnest(disperser_input, cols = c(start_hour)) disperser_input %&lt;&gt;% rename(ID = GEOID, start_day = date) %&gt;% mutate(uID = ID, Height = 20, year = year(start_day), month = month(start_day), duration_emiss_hours = 1, duration_run_hours = 12) #### write rds files write_rds(flares_data, &quot;../data/preprocessed/flares_data.rds&quot;) write_rds(tracts_sf, &quot;../data/preprocessed/tracts_sf.rds&quot;) write_rds(disperser_input, &quot;../data/jobs_input/disperser_input.rds&quot;) "],["flares.html", "3 Flares", " 3 Flares library(tidyverse) library(magrittr) library(lubridate) library(sf) library(sp) library(cowplot) flares_data &lt;- read_rds(&quot;../data/preprocessed/flares_data.rds&quot;) tracts_sf &lt;- read_rds(&quot;../data/preprocessed/tracts_sf.rds&quot;) #there are flares for each year-month-basin, no need to fill zero values flares_data %&gt;% mutate(yyyy_mm = format(as.Date(date), &quot;%Y_%m&quot;)) %&gt;% group_by(yyyy_mm, basin) %&gt;% summarise(flares = sum(flares)) %&gt;% ggplot() + geom_line(aes(x = ym(yyyy_mm), y = flares, color = basin)) + theme_cowplot() + labs(title = &quot;Total flares per month&quot;, x = &quot;&quot;) ## `summarise()` has grouped output by &#39;yyyy_mm&#39;. You can override using the ## `.groups` argument. flares_years &lt;- flares_data %&gt;% mutate(year = year(date)) %&gt;% group_by(year, GEOID, basin, area, pop) %&gt;% summarise(flares = sum(flares)) %&gt;% ungroup() %&gt;% mutate(flares_concentr = flares / area) ## `summarise()` has grouped output by &#39;year&#39;, &#39;GEOID&#39;, &#39;basin&#39;, &#39;area&#39;. You can ## override using the `.groups` argument. #### you can only read these as concentration within tracts where there are flares!!! ggplot(flares_years) + geom_boxplot(aes(x = as.factor(year), y = flares_concentr, col = basin)) time_grid_sf &lt;- tracts_sf %&gt;% filter(GEOID %in% unique(flares_data$GEOID), basin == &quot;Permian Basin&quot;) %&gt;% select(GEOID) time_grid_sf %&lt;&gt;% left_join( flares_years %&gt;% pivot_wider(id_cols = GEOID, names_from = year, values_from = flares_concentr) ) %&gt;% select(-GEOID) ## Joining, by = &quot;GEOID&quot; spplot(as_Spatial(time_grid_sf)) time_grid_sf &lt;- tracts_sf %&gt;% filter(GEOID %in% unique(flares_data$GEOID), basin == &quot;Gulf Coast Basins&quot;) %&gt;% select(GEOID) time_grid_sf %&lt;&gt;% left_join( flares_years %&gt;% pivot_wider(id_cols = GEOID, names_from = year, values_from = flares_concentr) ) %&gt;% select(-GEOID) ## Joining, by = &quot;GEOID&quot; spplot(as_Spatial(time_grid_sf)) "],["parcels-checkpoint.html", "4 Parcels checkpoint 4.1 check 1 4.2 check 2 4.3 check 3 4.4 check 4", " 4 Parcels checkpoint source(&quot;../lib/polygon_parcels_parallel.R&quot;) library(tidyverse) library(magrittr) library(lubridate) library(data.table) library(fst) library(sf) library(sp) library(gridExtra) library(cowplot) library(viridis) library(ggthemes) library(knitr) disperser_input &lt;- read_rds(&quot;../data/jobs_input/disperser_input.rds&quot;) sf &lt;- st_read(&quot;../data/input/tl_2016_48_tract/tl_2016_48_tract.shp&quot;) # &lt;- for polygon_parcel input ## Reading layer `tl_2016_48_tract&#39; from data source ## `/Users/audiracmichelle/GitHub/audiracmichelle/flaring_texas/data/input/tl_2016_48_tract/tl_2016_48_tract.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 5265 features and 12 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -106.6456 ymin: 25.83716 xmax: -93.50804 ymax: 36.5007 ## Geodetic CRS: NAD83 tracts_sf &lt;- read_rds(&quot;../data/preprocessed/tracts_sf.rds&quot;) # &lt;- for analysis 4.1 check 1 check disperser was able to run simulations for all emissions in disperser_input (compare with ls | wc at the simulations location) #### number of files disperser will create for each year month disperser_input %&gt;% group_by(year, month) %&gt;% summarise(n = n()) %&gt;% DT::datatable() ## `summarise()` has grouped output by &#39;year&#39;. You can override using the ## `.groups` argument. 4.2 check 2 validate that the number of parcels that are dispersed in each simulation run are counted in the polygon_parcel function #### set params for run_polygon_parcels sf %&lt;&gt;% filter(STATEFP == &quot;48&quot;) %&gt;% select(GEOID) %&gt;% mutate(GEOID = as.character(GEOID)) %&gt;% rename(id = GEOID) hysp_dir = &quot;../data/jobs_output/hysplit&quot; mc.cores = parallel::detectCores() range = which(disperser_input$start_day == as.Date(&quot;2018-01-06&quot;) &amp; disperser_input$start_hour == 2) input.refs = data.table(disperser_input[range,], stringsAsFactors = FALSE) run_X &lt;- lapply(1:nrow(input.refs), function(r) input.refs[r]) parcels_count &lt;- c() plots &lt;- list() for(X in run_X){ polygon_parcels &lt;- run_polygon_parcels(X = X, sf = sf, hysp_dir = hysp_dir) parcels_count &lt;- c(parcels_count, sum(polygon_parcels$count)) polygon_parcels &lt;- polygon_parcels %&gt;% rename(GEOID = id) %&gt;% mutate(parcels = count) parcels_sf &lt;- tracts_sf %&gt;% left_join(polygon_parcels) %&gt;% filter(!is.na(parcels)) %&gt;% mutate(parcels_concentr = parcels / area) p1 &lt;- parcels_sf %&gt;% ggplot() + geom_sf(aes(fill = parcels), size = 0) + scale_fill_viridis(option = &quot;B&quot;) + theme_map() + theme(legend.position = &quot;right&quot;) p2 &lt;- parcels_sf %&gt;% ggplot() + geom_sf(aes(fill = parcels_concentr), size = 0) + scale_fill_viridis(option = &quot;B&quot;) + theme_map() + theme(legend.position = &quot;right&quot;) plots[[X$ID]] &lt;- plot_grid(p1, p2) } parcels_count ## [1] 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 ## [16] 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 4.3 check 3 visual inspection of counts and concentrations plots ## $`48235950100` ## ## $`48389950100` ## ## $`48475950100` ## ## $`48317950100` ## ## $`48013960600` ## ## $`48301950100` ## ## $`48109950300` ## ## $`48003950100` ## ## $`48123970200` ## ## $`48501950100` ## ## $`48495950400` ## ## $`48173950100` ## ## $`48371950500` ## ## $`48507950301` ## ## $`48311950100` ## ## $`48329010109` ## ## $`48389950500` ## ## $`48165950200` ## ## $`48297950100` ## ## $`48163950100` ## ## $`48227950100` ## ## $`48149970600` ## ## $`48283950300` ## ## $`48383950100` ## ## $`48127950400` ## ## $`48461950100` 4.4 check 4 inspection of counts of parcels from all locations and its concentration # polygon_parcels &lt;- polygon_parcels_parallel(input.refs = input.refs, # sf = sf, # hysp_dir = hysp_dir, # mc.cores = mc.cores) # write_rds(polygon_parcels, &quot;_polygon_parcels.rds&quot;) polygon_parcels &lt;- read_rds(&quot;_polygon_parcels.rds&quot;) polygon_parcels &lt;- polygon_parcels %&gt;% rename(GEOID = id) %&gt;% group_by(GEOID) %&gt;% summarise(parcels = sum(count), weighted_parcels = sum(count * weight)) parcels_sf &lt;- tracts_sf %&gt;% left_join(polygon_parcels) %&gt;% filter(!is.na(parcels)) %&gt;% mutate(parcels_concentr = parcels / area, weighted_parcels_concentr = weighted_parcels / area) p1 &lt;- parcels_sf %&gt;% ggplot() + geom_sf(aes(fill = parcels), size = 0) + scale_fill_viridis(option = &quot;B&quot;) + theme_map() + theme(legend.position = &quot;right&quot;) p2 &lt;- parcels_sf %&gt;% ggplot() + geom_sf(aes(fill = parcels_concentr), size = 0) + scale_fill_viridis(option = &quot;B&quot;) + theme_map() + theme(legend.position = &quot;right&quot;) plot_grid(p1, p2, nrow = 2) The issue blows up with weighted_parcels_concentr. Unintentionally, by throwing randomn grids and then overlapping with the administrative boundaries, disperseR induces some sort of density estimation (similar to KDE kernel density estimation?) –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
